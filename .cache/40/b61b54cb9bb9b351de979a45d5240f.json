{"id":"../node_modules/pixi.js/lib/filters/defaults/noise/noise.frag.mjs","dependencies":[{"name":"D:\\Game-Project\\node_modules\\pixi.js\\lib\\filters\\defaults\\noise\\noise.frag.mjs.map","includedInParent":true,"mtime":1710778042534},{"name":"D:\\Game-Project\\package.json","includedInParent":true,"mtime":1710778529165},{"name":"D:\\Game-Project\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1710778041522}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar fragment = exports.default = \"\\nin vec2 vTextureCoord;\\nin vec4 vColor;\\n\\nout vec4 finalColor;\\n\\nuniform float uNoise;\\nuniform float uSeed;\\nuniform sampler2D uTexture;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture(uTexture, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * 0.2);\\n    float diff = (randomValue - 0.5) *  0.5;\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    color.r += diff;\\n    color.g += diff;\\n    color.b += diff;\\n\\n    // Premultiply alpha again.\\n    color.rgb *= color.a;\\n\\n    finalColor = color;\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"e5c74cc85d664a081ee44bd6f601c781","cacheData":{"env":{}}}