{"id":"../node_modules/parse-svg-path/index.js","dependencies":[{"name":"C:\\Users\\Dell\\AndroidStudioProjects\\Game_billiards\\Game-Project\\package.json","includedInParent":true,"mtime":1710812577720},{"name":"C:\\Users\\Dell\\AndroidStudioProjects\\Game_billiards\\Game-Project\\node_modules\\parse-svg-path\\package.json","includedInParent":true,"mtime":1710811402023}],"generated":{"js":"\r\nmodule.exports = parse\r\n\r\n/**\r\n * expected argument lengths\r\n * @type {Object}\r\n */\r\n\r\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\r\n\r\n/**\r\n * segment pattern\r\n * @type {RegExp}\r\n */\r\n\r\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\r\n\r\n/**\r\n * parse an svg path data string. Generates an Array\r\n * of commands where each command is an Array of the\r\n * form `[command, arg1, arg2, ...]`\r\n *\r\n * @param {String} path\r\n * @return {Array}\r\n */\r\n\r\nfunction parse(path) {\r\n\tvar data = []\r\n\tpath.replace(segment, function(_, command, args){\r\n\t\tvar type = command.toLowerCase()\r\n\t\targs = parseValues(args)\r\n\r\n\t\t// overloaded moveTo\r\n\t\tif (type == 'm' && args.length > 2) {\r\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\r\n\t\t\ttype = 'l'\r\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\r\n\t\t}\r\n\r\n\t\twhile (true) {\r\n\t\t\tif (args.length == length[type]) {\r\n\t\t\t\targs.unshift(command)\r\n\t\t\t\treturn data.push(args)\r\n\t\t\t}\r\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\r\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\r\n\t\t}\r\n\t})\r\n\treturn data\r\n}\r\n\r\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\r\n\r\nfunction parseValues(args) {\r\n\tvar numbers = args.match(number)\r\n\treturn numbers ? numbers.map(Number) : []\r\n}\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/parse-svg-path/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/parse-svg-path/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"../node_modules/parse-svg-path/index.js":"\r\nmodule.exports = parse\r\n\r\n/**\r\n * expected argument lengths\r\n * @type {Object}\r\n */\r\n\r\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\r\n\r\n/**\r\n * segment pattern\r\n * @type {RegExp}\r\n */\r\n\r\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\r\n\r\n/**\r\n * parse an svg path data string. Generates an Array\r\n * of commands where each command is an Array of the\r\n * form `[command, arg1, arg2, ...]`\r\n *\r\n * @param {String} path\r\n * @return {Array}\r\n */\r\n\r\nfunction parse(path) {\r\n\tvar data = []\r\n\tpath.replace(segment, function(_, command, args){\r\n\t\tvar type = command.toLowerCase()\r\n\t\targs = parseValues(args)\r\n\r\n\t\t// overloaded moveTo\r\n\t\tif (type == 'm' && args.length > 2) {\r\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\r\n\t\t\ttype = 'l'\r\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\r\n\t\t}\r\n\r\n\t\twhile (true) {\r\n\t\t\tif (args.length == length[type]) {\r\n\t\t\t\targs.unshift(command)\r\n\t\t\t\treturn data.push(args)\r\n\t\t\t}\r\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\r\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\r\n\t\t}\r\n\t})\r\n\treturn data\r\n}\r\n\r\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\r\n\r\nfunction parseValues(args) {\r\n\tvar numbers = args.match(number)\r\n\treturn numbers ? numbers.map(Number) : []\r\n}\r\n"},"lineCount":58}},"error":null,"hash":"af5e14dc2f9b398e6aca1eb9cf1cedcb","cacheData":{"env":{}}}